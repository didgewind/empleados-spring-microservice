Esta versión tira de spring boot 2.0

* empleados spring-boot (puerto aleatorio): microservicio rest de empleados tirando de mysql. A partir de este
commit añadimos soporte para Derby. OJO, si usamos derby no podemos tener abierto ij (el cliente de consola de
derby) porque nos dará un error de que no se puede abrir la bd por un tema de class loaders. Múltiples
jvms accediendo a la misma bd derby sí funciona. Para elegir derby o mysql simplemente comentar / descomentar
las líneas apropiadas en el empleados-server.yml.
Usa i18n para el mensaje de bienvenida. Hemos añadido una línea en el .properties para poder lanzar
diferentes instancias del servicio y probar balance de carga. Para lanzar diferentes instancias simplemente
hay que ejecutar la app, porque el puerto está configurado para que se elija aleatoriamente.

	- Tres daos - uno en memoria, el otro inmutable que siempre devuelve el mismo empleado
	  y un spring jdbc que ataca empleados_simple.
	  
	- Una clase java config para instanciar DAODumb.
	
	- Un controlador Home que redirige / a /index.jsp
	  
	- Un controlador Rest que funciona con JSON y XML y mapea a /empleados/ y sus derivados. Si probamos
	  directamente con el navegador va a devolver xml (por la cabecera que se envía, creo). El Json
	  se puede probar con Postman. Su api es:
	
		- GET /empleados/: devuelve todos los empleados
		- GET /empleados/x: devuelve el empleado con cif x
		- PUT /empleados/x: modifica un empleado (sólo admin). Podríamos cambiar el cif de un empleado,
		  pero de momento en el controlador ignoramos el cif que recibimos en el body.
		- DELETE /empleados/x: elimina el empleado con cif x (sólo admin)
		- POST /empleados/: inserta un empleado (sólo admin)
		
	  ATENCIÓN, EL API LO HEMOS CAMBIADO A PARTIR DE ESTE COMMIT, AHORA POST Y PUT ESTÁN INTERCAMBIADOS.
	  LA SINTÁXIS POST QUE USO NO ES TOTALMENTE CORRECTA (VER https://restfulapi.net/rest-put-vs-post/
	  Y COMENTARIOS) PERO ME VALE COMO EJEMPLO
		
	  Trabaja con Json y xml porque Spring detecta las librerías Jackson en el path y 
	  utiliza httpmessageconverters. Es por ello que al hacer la misma petición REST 
	  con un navegador web y Postman el segundo devuelve siempre JSON pero el primero puede devolver xml
	  (depende de la cabecera de aceptación de respuesta que envía el cliente).
	  
	  Devuelve cabeceras con código de error en caso de que se produzcan (por ejemplo, NOT_FOUND en caso
	  de delete o get de un cif que no existe, o CONFLICT si el empleado está repetido).
	  
	  Los métodos insert, modify y delete devuelven un ResponseEntity<void>, aunque podrían devolver
	  directamente un Empleado (ver el controlador del proyecto empleados-db) o quizás simplemente
	  un void.
	  
	- Implementamos autorización con java config discriminando por roles USER y ADMIN
	  mediante la clase profe.empleados.mvc.security.EmpleadosWebSecurityConfig. Ahora usamos jwt y
	  separamos la autenticación (la proporciona el auth-server) de la autorización (autorizamos
	  por roles). Podemos
	  utilizar postman para probar invocaciones directas (fichero de config jwt en la carpeta postman
	  que incluye una petición 'authorization request' para obtener el token jwt a través del auth-server).
	  La clase clave en el proceso de autorización es JwtFilter, que básicamente salta en cada
	  petición y, si el cliente envía un token jwt, lo transforma en un usuario con sus roles y
	  lo añade al contexto de seguridad. Luego ya el propio spring comprobará si ese role está
	  autorizado o no para acceder al recurso solicitado. Si no hay token jwt o no está bien formado
	  el usuario no se añade al contexto de seguridad (acceso anónimo)

	- EmpleadosApp arranca el servidor embebido.


