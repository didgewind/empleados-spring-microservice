Esta versión estamos probando con openshift crc (codeready containers) siguiendo las indicaciones
de https://access.redhat.com/documentation/en-us/red_hat_support_for_spring_boot/2.3/html/spring_boot_runtime_guide/creating-a-basic-springboot-application_spring-boot.
El pom está modificado para integrar cosas de openshift, así que la versión de spring boot es la 2.3.

De momento no estamos desplegando en crc, simplemente hemos modificado el pom y probamos que funciona
ejecutando desde un terminal

	mvn spring-boot:run

* empleados spring-boot (puerto 5555): microservicio rest de empleados eliminando referencias a bd,
a seguridad y a eureka para poder ejecutar en cualquier equipo. A partir de un commit hay un ejemplo de swagger.
También tenemos una clase de configuración para permitir CORS y así poder atacarlo desde una app angular.
Usa i18n para el mensaje de bienvenida. Hemos añadido una línea en el .properties para poder lanzar
diferentes instancias del servicio y probar balance de carga. Para lanzar diferentes instancias simplemente
hay que ejecutar la app, porque el puerto está configurado para que se elija aleatoriamente.

	- Dos daos - uno en memoria, el otro inmutable que siempre devuelve el mismo empleado
	  
	- Una clase java config para instanciar DAODumb.
	
	- Un SwaggerConfig para configurar Swagger (url de acceso: http://localhost:5555/swagger-ui.html)
	
	- Un controlador Home que redirige / a /index.jsp
	  
	- Un controlador Rest que funciona con JSON y XML y mapea a /empleados/ y sus derivados. Si probamos
	  directamente con el navegador va a devolver xml (por la cabecera que se envía, creo). El Json
	  se puede probar con Postman. Su api es:
	
		- GET /empleados/: devuelve todos los empleados
		- GET /empleados/x: devuelve el empleado con cif x
		- PUT /empleados/x: modifica un empleado (sólo admin)
		- DELETE /empleados/x: elimina el empleado con cif x (sólo admin)
		- POST /empleados/: inserta un empleado (sólo admin)
		
	  ATENCIÓN, EL API LO HEMOS CAMBIADO A PARTIR DE ESTE COMMIT, AHORA POST Y PUT ESTÁN INTERCAMBIADOS.
	  LA SINTÁXIS POST QUE USO NO ES TOTALMENTE CORRECTA (VER https://restfulapi.net/rest-put-vs-post/
	  Y COMENTARIOS) PERO ME VALE COMO EJEMPLO
		
	  Trabaja con Json y xml porque Spring detecta las librerías Jackson en el path y 
	  utiliza httpmessageconverters. Es por ello que al hacer la misma petición REST 
	  con un navegador web y Postman el segundo devuelve siempre JSON pero el primero puede devolver xml
	  (depende de la cabecera de aceptación de respuesta que envía el cliente).
	  
	  Devuelve cabeceras con código de error en caso de que se produzcan (por ejemplo, NOT_FOUND en caso
	  de delete o get de un cif que no existe, o CONFLICT si el empleado está repetido)

	- EmpleadosApp arranca el servidor embebido.

- Sobre el logout (cogido del proyecto 'empleados hb spring mvc sec ws 4' del workspace
'spring completo'): parece que desde la versión 4 de spring security 
el logout por defecto sólo
funciona cuando hacemos una petición de logout POST enviando un csrf (ver apuntes de seguridad
spring). Para habilitar el logout get lo podemos hacer deshabilitando el csrf (como hacemos
en el proyecto mencionado al configurar la seguridad de forma declarativa) o mediante el código que
se encuentra en la clase WebSecurityConfig del mismo proyecto (que respeta el csrf).

