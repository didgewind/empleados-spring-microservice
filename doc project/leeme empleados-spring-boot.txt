Esta versión tira de spring boot 2.0

Eureka, hibernate, actuators, no config server, no security

* empleados spring-boot (puerto aleatorio o 5555): microservicio rest de empleados tirando de mysql
y soporte hibernate añadido. Además de la config hibernate (en la clase @Configuration) hemos tenido que
añadir @SpringBootApplication(exclude = {JpaRepositoriesAutoConfiguration.class, HibernateJpaAutoConfiguration.class })
para que desplegara y funcionara bien.
Usa i18n para el mensaje de bienvenida. Hemos añadido una línea en el .properties para poder lanzar
diferentes instancias del servicio y probar balance de carga. Para lanzar diferentes instancias simplemente
hay que ejecutar la app, porque el puerto está configurado para que se elija aleatoriamente.

	- Cuatro daos - uno en memoria, el otro inmutable que siempre devuelve el mismo empleado
	  y un spring jdbc y otro hibernate que atacan empleados_simple.
	  
	- Una clase java config para la config hibernate e instanciar DAODumb.
	
	- Un controlador Home que redirige / a /index.jsp
	  
	- Un controlador Rest que funciona con JSON y XML y mapea a /empleados/ y sus derivados. Si probamos
	  directamente con el navegador va a devolver xml (por la cabecera que se envía, creo). El Json
	  se puede probar con Postman. Su api es:
	
		- GET /empleados/: devuelve todos los empleados
		- GET /empleados/x: devuelve el empleado con cif x
		- PUT /empleados/: modifica un empleado (sólo admin)
		- DELETE /empleados/x: elimina el empleado con cif x (sólo admin)
		- POST /empleados/: inserta un empleado (sólo admin)
		
	  ATENCIÓN, EL API LO HEMOS CAMBIADO A PARTIR DE ESTE COMMIT, AHORA POST Y PUT ESTÁN INTERCAMBIADOS.
	  LA SINTÁXIS POST QUE USO NO ES TOTALMENTE CORRECTA (VER https://restfulapi.net/rest-put-vs-post/
	  Y COMENTARIOS) PERO ME VALE COMO EJEMPLO
		
	  Trabaja con Json y xml porque Spring detecta las librerías Jackson en el path y 
	  utiliza httpmessageconverters. Es por ello que al hacer la misma petición REST 
	  con un navegador web y Postman el segundo devuelve siempre JSON pero el primero puede devolver xml
	  (depende de la cabecera de aceptación de respuesta que envía el cliente).
	  
	  Devuelve cabeceras con código de error en caso de que se produzcan (por ejemplo, NOT_FOUND en caso
	  de delete o get de un cif que no existe, o CONFLICT si el empleado está repetido)

	- EmpleadosApp arranca el servidor embebido.

