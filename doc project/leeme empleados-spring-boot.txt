Esta versión tira de spring boot 2.0. Esta branch emite empleados de forma reactiva.
Este commit prescinde de seguridad y bd (los empleados son del daomock) y configura
el servicio para CORS.

Para probar la reactividad ejecutar desde un terminal:

curl -u profe:profe -H "Accept: text/event-stream" "http://localhost:5555/empleados/reactive"

* empleados spring-boot (puerto aleatorio): microservicio rest de empleados.

	- Dos daos - uno en memoria, el otro inmutable que siempre devuelve el mismo empleado..
	  
	- Una clase java config para instanciar DAODumb.
	  
	- Un controlador Rest que funciona con JSON y XML y mapea a /empleados/ y sus derivados. Si probamos
	  directamente con el navegador va a devolver xml (por la cabecera que se envía, creo). El Json
	  se puede probar con Postman. Su api es:
	
		- GET /empleados/: devuelve todos los empleados
		- GET /empleados/reactive: devuelve todos los empleados con un delay de 1 segundo por empleado
		- GET /empleados/x: devuelve el empleado con cif x
		- PUT /empleados/: modifica un empleado
		- DELETE /empleados/x: elimina el empleado con cif x
		- POST /empleados/: inserta un empleado
		
	  ATENCIÓN, EL API LO HEMOS CAMBIADO A PARTIR DE ESTE COMMIT, AHORA POST Y PUT ESTÁN INTERCAMBIADOS.
	  LA SINTÁXIS POST QUE USO NO ES TOTALMENTE CORRECTA (VER https://restfulapi.net/rest-put-vs-post/
	  Y COMENTARIOS) PERO ME VALE COMO EJEMPLO
		
	  Trabaja con Json y xml porque Spring detecta las librerías Jackson en el path y 
	  utiliza httpmessageconverters. Es por ello que al hacer la misma petición REST 
	  con un navegador web y Postman el segundo devuelve siempre JSON pero el primero puede devolver xml
	  (depende de la cabecera de aceptación de respuesta que envía el cliente).
	  
	  Devuelve cabeceras con código de error en caso de que se produzcan (por ejemplo, NOT_FOUND en caso
	  de delete o get de un cif que no existe, o CONFLICT si el empleado está repetido)

	- EmpleadosApp arranca el servidor embebido.


